package net.ccbluex.liquidbounce.ui.client.clickgui.neverlose.implvalueimport me.aquavit.liquidsense.utils.render.RenderUtilsimport net.ccbluex.liquidbounce.ui.client.clickgui.neverlose.module.NModuleimport net.ccbluex.liquidbounce.ui.font.Fontsimport net.ccbluex.liquidbounce.value.FloatValueimport net.ccbluex.liquidbounce.value.Valueimport org.lwjgl.input.Mouseimport java.awt.Colorimport kotlin.math.roundToIntclass FloatValuedraw(n: NModule, thevalue: Value<*>) {    var yes = false    var nModule = n    var value = thevalue as FloatValue    fun draw() {        value.floatvalue.translate(value.float, 0f, 1.0)        val longValue = 51f        val inc = 0.01        val max = value.maximum        val min = value.minimum        val valAbs: Double = (nModule.mouseX - (nModule.positionX + 87f)).toDouble()        val perc = Math.min(Math.max(0.0, valAbs / (longValue * Math.max(Math.min(value.get() / max, 0f), 1f))), 1.0)        val valRel = (max - min) * perc        value.float = (longValue * (value.get() - min) / (max - min))        if (nModule.main.hovertoFloatL(nModule.positionX + 86f, nModule.positionY + 26.5f + nModule.valuePosY, nModule.positionX + 139f, nModule.positionY + 35.5f + nModule.valuePosY, nModule.mouseX,                                       nModule.mouseY, false) && Mouse.isButtonDown(0) && yes) {            var idk = min + valRel            idk = (idk * (1 / inc)).roundToInt() / (1 / inc)            value.set(idk.toFloat())        }        if (nModule.main.hovertoFloatL(nModule.positionX + 145f, nModule.positionY + 24.5f + nModule.valuePosY, nModule.positionX + 170f, nModule.positionY + 33.5f + nModule.valuePosY , nModule.mouseX,                                       nModule.mouseY, true)  && yes) {            println(value.name)            Editbox.value = value            Editbox.newvalue = value.get().toString()        }        RenderUtils.drawRect(nModule.positionX + 87f, nModule.positionY + 29.5f + nModule.valuePosY, nModule.positionX + 138f, nModule.positionY + 30.5f + nModule.valuePosY, Color(6, 17, 32).rgb)        RenderUtils.drawRect(nModule.positionX + 87f, nModule.positionY + 29.5f + nModule.valuePosY, nModule.positionX + 87f + value.floatvalue.x, nModule.positionY + 30.5f + nModule.valuePosY, Color(34, 92, 123).rgb)        RenderUtils.drawFullCircle(nModule.positionX + 87f + value.floatvalue.x, nModule.positionY + 29.5f + nModule.valuePosY, 3f, 0f, Color(57, 133, 236))        Fonts.font15.drawString(value.name, nModule.positionX + 6, nModule.positionY + 27 + nModule.valuePosY, Color(175, 175, 175).rgb)        RenderUtils.drawRectBordered(nModule.positionX + 145.0, nModule.positionY + 24.5 + nModule.valuePosY, nModule.positionX + 170.0, nModule.positionY + 33.5 + nModule.valuePosY, 0.7, Color(7, 14, 22).rgb,if( Editbox.value != null && Editbox.value!!.name == value.name)  Color(255, 255, 255).rgb else            Color(21, 31, 41, 100).rgb)        nModule.main.drawText(if( Editbox.value != null && Editbox.value!!.name == value.name) Editbox.newvalue!! else  value.get().toString(), 5, Fonts.font14, nModule.positionX + 147, nModule.positionY + 28 + nModule.valuePosY, Color(175, 175, 175).rgb)        nModule.valuePosY += nModule.module.openValue.y.toInt()    }}