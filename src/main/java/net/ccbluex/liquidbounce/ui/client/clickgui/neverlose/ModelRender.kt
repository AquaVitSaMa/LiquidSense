package net.ccbluex.liquidbounce.ui.client.neverloseimport me.aquavit.liquidsense.utils.mc.MinecraftInstanceimport net.minecraft.client.renderer.GlStateManagerimport net.minecraft.client.renderer.OpenGlHelperimport net.minecraft.client.renderer.RenderHelperimport net.minecraft.entity.EntityLivingBaseimport org.lwjgl.opengl.GL11import kotlin.math.atanobject ModelRender : MinecraftInstance() {    fun draw(positionX :Float , positionY: Float) {        GlStateManager.pushMatrix()        GlStateManager.translate(positionX , positionY , positionX)        drawEntityOnScreen(-360f , 0f , mc.thePlayer)        GlStateManager.popMatrix()    }    /**     * Draw [entityLivingBase] to screen     */    private fun drawEntityOnScreen(yaw: Float, pitch: Float, entityLivingBase: EntityLivingBase) {        GlStateManager.resetColor()        GL11.glColor4f(1F, 1F, 1F, 1F)        GlStateManager.enableColorMaterial()        GlStateManager.pushMatrix()        GlStateManager.translate(0F, 0F, 50F)        GlStateManager.scale(-50F, 50F, 50F)        GlStateManager.rotate(180F, 0F, 0F, 1F)        val renderYawOffset = entityLivingBase.renderYawOffset        val rotationYaw = entityLivingBase.rotationYaw        val rotationPitch = entityLivingBase.rotationPitch        val prevRotationYawHead = entityLivingBase.prevRotationYawHead        val rotationYawHead = entityLivingBase.rotationYawHead        GlStateManager.rotate(135F, 0F, 1F, 0F)        RenderHelper.enableStandardItemLighting()        GlStateManager.rotate(-135F, 0F, 1F, 0F)        GlStateManager.rotate(-atan(pitch / 40F) * 20.0F, 1F, 0F, 0F)        entityLivingBase.renderYawOffset = yaw        entityLivingBase.rotationYaw = yaw        entityLivingBase.rotationPitch = -pitch        entityLivingBase.rotationYawHead = entityLivingBase.rotationYaw        entityLivingBase.prevRotationYawHead = entityLivingBase.rotationYaw        GlStateManager.translate(0F, 0F, 0F)        val renderManager = mc.renderManager        renderManager.setPlayerViewY(180F)        renderManager.isRenderShadow = false        renderManager.renderEntityWithPosYaw(entityLivingBase, 0.0, 0.0, 0.0, 0F, 1F)        renderManager.isRenderShadow = true        entityLivingBase.renderYawOffset = renderYawOffset        entityLivingBase.rotationYaw = rotationYaw        entityLivingBase.rotationPitch = rotationPitch        entityLivingBase.prevRotationYawHead = prevRotationYawHead        entityLivingBase.rotationYawHead = rotationYawHead        GlStateManager.popMatrix()        RenderHelper.disableStandardItemLighting()        GlStateManager.disableRescaleNormal()        GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit)        GlStateManager.disableTexture2D()        GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit)        GlStateManager.resetColor()    }}