package net.ccbluex.liquidbounce.ui.client.clickgui.neverlose.implvalueimport me.aquavit.liquidsense.utils.render.RenderUtilsimport net.ccbluex.liquidbounce.ui.client.clickgui.neverlose.module.NModuleimport net.ccbluex.liquidbounce.ui.client.neverlose.Implimport net.ccbluex.liquidbounce.ui.font.Fontsimport net.ccbluex.liquidbounce.value.MultiBoolValueimport net.ccbluex.liquidbounce.value.Valueimport net.minecraft.client.renderer.GlStateManagerimport java.awt.Colorclass MultiBoolValuedraw(n: NModule, value: Value<*>) {    var nModule = n    var values = value as MultiBoolValue    var yes = false        fun draw() {        var index = 0        if (nModule.main.hovertoFloatL(nModule.positionX + 75f, nModule.positionY + 22f + nModule.valuePosY, nModule.positionX + 169f, nModule.positionY + 31f + nModule.valuePosY, nModule.mouseX, nModule.mouseY, true) && yes) {            values.openList = !values.openList        }        when (Impl.hue) {            "black", "blue" -> {                RenderUtils.drawRectBordered(nModule.positionX + 85.0, nModule.positionY + 21.0 + nModule.valuePosY, nModule.positionX + 170.0, nModule.positionY + 34.0 + nModule.valuePosY, 0.8                        , if (Impl.hue == "black") Color(13,13,13).rgb else Color(7, 14, 22).rgb                        , Color(21, 31, 41,                        if (!values.openList) 100 else 0).rgb)                GlStateManager.resetColor()                Fonts.font15.drawString(values.name, nModule.positionX + 6, nModule.positionY + 25 + nModule.valuePosY, Color(200, 200, 200).rgb)                if (values.openList) {                    RenderUtils.drawRect(nModule.positionX + 95f, nModule.positionY + 33f + nModule.valuePosY, nModule.positionX + 155f, nModule.positionY + 35f + nModule.valuePosY, Color(7, 24, 34).rgb)                }            }            "white" -> {                RenderUtils.drawRectBordered(nModule.positionX + 85.0, nModule.positionY + 21.0 + nModule.valuePosY, nModule.positionX + 170.0, nModule.positionY + 34.0 + nModule.valuePosY, 0.8                        , Color(255, 255, 255).rgb                        , Color(21, 31, 41                        , if (!values.openList) 100 else 0).rgb)                GlStateManager.resetColor()                Fonts.font15.drawString(values.name, nModule.positionX + 6, nModule.positionY + 25 + nModule.valuePosY                        , Color(90, 90, 90).rgb)                if (values.openList) {                    RenderUtils.drawRect(nModule.positionX + 95f, nModule.positionY + 33f + nModule.valuePosY, nModule.positionX + 155f, nModule.positionY + 35f + nModule.valuePosY                            , Color(255, 255, 255).rgb)                }            }        }        nModule.valuePosY += nModule.module.openValue.y.toInt()        var enablerstring = ""        for (valuesOfList in 0..values.values.lastIndex) {            if (values.value[valuesOfList]) {                enablerstring += values.values[valuesOfList] + " "            }            if (values.openList) {                val hover = nModule.main.hovertoFloatL(nModule.positionX + 95f, nModule.positionY + 13.5f + nModule.valuePosY, nModule.positionX + 169f, nModule.positionY + 25f + nModule.valuePosY, nModule.mouseX, nModule.mouseY, false)                if (nModule.main.hovertoFloatL(nModule.positionX + 95f, nModule.positionY + 13.5f + nModule.valuePosY, nModule.positionX + 169f, nModule.positionY + 25f + nModule.valuePosY, nModule.mouseX, nModule.mouseY, true) && yes) {                    values.value[valuesOfList] = !values.value[valuesOfList]                }                when (Impl.hue) {                    "black" -> {                        RenderUtils.drawRect(nModule.positionX + 86f, nModule.positionY + 13f + nModule.valuePosY, nModule.positionX + 169f,                                nModule.positionY + 25f + nModule.valuePosY, if (hover) Color(13,13,13).rgb else Color(13,13,13).rgb)                        nModule.main.drawText(values.values[valuesOfList], 14, Fonts.font15, nModule.positionX + 88, nModule.positionY + 17 + nModule.valuePosY                                , if (values.value[valuesOfList]) Color(255,255,255).rgb else Color(175, 175, 175).rgb)                    }                    "blue" -> {                        RenderUtils.drawRect(nModule.positionX + 86f, nModule.positionY + 13f + nModule.valuePosY, nModule.positionX + 169f,                                nModule.positionY + 25f + nModule.valuePosY, if (hover) Color(8,18,30).rgb else Color(4,12,19).rgb)                        nModule.main.drawText(values.values[valuesOfList], 14, Fonts.font15, nModule.positionX + 88, nModule.positionY + 17 + nModule.valuePosY                                , if (values.value[valuesOfList]) Color(70, 111, 255).rgb else Color(175, 175, 175).rgb)                    }                    "white" -> {                        RenderUtils.drawRect(nModule.positionX + 86f, nModule.positionY + 13f + nModule.valuePosY, nModule.positionX + 169f,                                nModule.positionY + 25f + nModule.valuePosY, if (hover) Color(255,255,255).rgb else Color(255,255,255).rgb)                        nModule.main.drawText(values.values[valuesOfList], 14, Fonts.font15, nModule.positionX + 88, nModule.positionY + 17 + nModule.valuePosY                                , if (values.value[valuesOfList]) Color(1,1,1).rgb else Color(90, 90, 90).rgb)                    }                }                nModule.valuePosY += 12                nModule.module.outvalue++                index++            }        }        nModule.main.drawText(enablerstring, 19, Fonts.font16, nModule.positionX + 88, nModule.positionY + 6 + nModule.valuePosY - (12 * index), Color(175, 175, 175).rgb)    }}