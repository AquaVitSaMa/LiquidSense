package net.ccbluex.liquidbounce.ui.client.neverloseimport me.aquavit.liquidsense.utils.mc.MinecraftInstanceimport me.aquavit.liquidsense.utils.misc.RandomUtilsimport net.ccbluex.liquidbounce.LiquidBounceimport net.ccbluex.liquidbounce.ui.font.Fontsimport net.ccbluex.liquidbounce.utils.render.RenderUtilsimport net.minecraft.client.renderer.texture.DynamicTextureimport net.minecraft.util.ResourceLocationimport java.awt.image.BufferedImageimport java.io.ByteArrayInputStreamimport java.io.Fileimport java.io.FileInputStreamimport java.io.InputStreamimport java.nio.file.Filesimport java.util.*import javax.imageio.ImageIOobject CapeManager : MinecraftInstance() {    var Image = "idk"    private var width = 64    private var height = 64    private val resourceLocation = ResourceLocation(RandomUtils.randomNumber(128))    fun oneImageUpdate(file : File) {        setUp(file)    }    fun draw(x : Int , y : Int ,mouseX : Int , mouseY: Int , file : File , main : Main) {        setUp(file)        RenderUtils.drawImage(resourceLocation, x, y, 32, 32)        main.drawText(file.name , 13 , Fonts.font16, x , y , -1)    }    fun Update (image: String) {        try {            Image = image            val inputStream: InputStream = FileInputStream(File(LiquidBounce.fileManager.CapeDir, image))            //val byteArrayInputStream = ByteArrayInputStream(Base64.getDecoder().decode(image))            val bufferedImage = ImageIO.read(inputStream)            inputStream.close()            width = bufferedImage.width            height = bufferedImage.height            mc.textureManager.loadTexture(resourceLocation, DynamicTexture(bufferedImage))        } catch (e: Exception) {            e.printStackTrace()        }    }    fun setUp (image: File) {        try {            Update(image.name)        } catch (e: Exception) {            e.printStackTrace()        }    }}